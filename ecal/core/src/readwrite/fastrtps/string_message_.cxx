// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file string_message_.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "string_message_.h"

#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

string_message_::string_message_()
{

    m_id = 0;
    m_clock = 0;
    m_time = 0;
    m_compressed = 0;
    m_size = 0;
    m_hash = 0;

}

string_message_::~string_message_()
{
}

string_message_::string_message_(const string_message_ &x)
{
    m_tid = x.m_tid;
    m_id = x.m_id;
    m_clock = x.m_clock;
    m_time = x.m_time;
    m_compressed = x.m_compressed;
    m_size = x.m_size;
    m_hash = x.m_hash;
    m_payload = x.m_payload;
}

string_message_::string_message_(string_message_ &&x)
{
    m_tid = std::move(x.m_tid);
    m_id = x.m_id;
    m_clock = x.m_clock;
    m_time = x.m_time;
    m_compressed = x.m_compressed;
    m_size = x.m_size;
    m_hash = x.m_hash;
    m_payload = std::move(x.m_payload);
}

string_message_& string_message_::operator=(const string_message_ &x)
{
    m_tid = x.m_tid;
    m_id = x.m_id;
    m_clock = x.m_clock;
    m_time = x.m_time;
    m_compressed = x.m_compressed;
    m_size = x.m_size;
    m_hash = x.m_hash;
    m_payload = x.m_payload;
    
    return *this;
}

string_message_& string_message_::operator=(string_message_ &&x)
{
    m_tid = std::move(x.m_tid);
    m_id = x.m_id;
    m_clock = x.m_clock;
    m_time = x.m_time;
    m_compressed = x.m_compressed;
    m_size = x.m_size;
    m_hash = x.m_hash;
    m_payload = std::move(x.m_payload);
    
    return *this;
}

size_t string_message_::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t string_message_::getCdrSerializedSize(const string_message_& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.tid().size() + 1;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += (data.payload().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void string_message_::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_tid;
    scdr << m_id;
    scdr << m_clock;
    scdr << m_time;
    scdr << m_compressed;
    scdr << m_size;
    scdr << m_hash;
    scdr << m_payload;
}

void string_message_::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_tid;
    dcdr >> m_id;
    dcdr >> m_clock;
    dcdr >> m_time;
    dcdr >> m_compressed;
    dcdr >> m_size;
    dcdr >> m_hash;
    dcdr >> m_payload;
}

size_t string_message_::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            









    return current_align;
}

bool string_message_::isKeyDefined()
{
    return false;
}

void string_message_::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
	 
	 
	 
	 
	 
}